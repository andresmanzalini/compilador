%% x := y + z 

INTEGER x ;
INTEGER y ;
INTEGER z ;


y = 99 + 3 ;
z = 1 ;

w = 89 ;

x = y + z ;



IF ( x + 5 < 9 ) { ff = 8 ; } END_IF ; 

IF ( x + 5 < 9 ) { INTEGER fff ; fff = 8 ; } END_IF ; 


%%aca ocupo 3 registros.. -> cuando los libero?


%%aca hay un error! para ww no completa el BF
%%debe ser por tener un IF simple adentro de un IF - ELSE
%%entonces solo cierra

INTEGER ww ; 
ww = 8 ;

IF ( ww > 0 ) { 
	IF ( b1 > 8 ) { 
		y = b ; 
	} END_IF ; 
	
	INTEGER k ; 
	k = k * y ; 
} ELSE { 
	INTEGER j ; 
	j = j - 3 ; 
} END_IF ;



IF ( ww < 0 ) { 
	INTEGER k ; 
	k = k * y ; 
} ELSE { 
	IF ( b2 > 8 ) { 
		y = b ; 
	} END_IF ; 
	
	INTEGER j ; 
	j = j - 3 ; 
} END_IF ;


%%este problema pasa solo si se define un IF simple dentro del primer cuerpo
%%si se define dentro del cuerpo sgte al ELSE anda bien



INTEGER a ;
a = 5 ;

INTEGER b ;
b = 8 ;

INTEGER c ;
c = 9 ;


IF ( a - b > c + 1 ) { a = b + c ; } ELSE { a = b - c ; } END_IF ;


INTEGER d ;
d = 2 ;


LOOP { a = b + c ; c = d - 3 ; } UNTIL ( a + b > c - d ) ;



%%en la generacion de codigo assembler falta CALL y RET cuando finaliza

PROC proced ( INTEGER m ) NI = 2 { yyy = 99 + m ; } ;


PROC f1 ( INTEGER x , REF FLOAT y , FLOAT z ) NI = 2 { 
	x = y + z ; 
	INTEGER f1a ;
	f1a = 100 ;
		
	} ;


PROC f2 ( INTEGER x , REF FLOAT y , FLOAT z ) NI = 2 { 
	x = y + z ; 
	INTEGER f2a ;
	f2a = 1000 ;
	
	PROC fn ( INTEGER x , FLOAT y ) NI = 1 {
		INTEGER fnnn ;
		fnnn = x ;
		} ;	
	
	} ;



proced ( a : x ) ;  %%asi invoca bien. falta la semantica de la invocacion
			
			
%% a = 9 + 7 * 6 ;
b = 22 + a ;

c = a - b ;