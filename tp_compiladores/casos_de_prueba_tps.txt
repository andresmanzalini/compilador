%%IDENTIFICADORES  

x = 5 ;
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa = 99 ;
abc_30 = 30 ; 
abc+ 
abc_30+  
b = -5 ; 


%% CONSTANTES

%% INTEGERs

INTEGER x ; 
x = 55 ;

INTEGER x_i ;
x_i = 66666 ;

INTEGER xy ;
xy = 777 ;
xy = 9889 ;
abc = 10 ;


y = x + abc ;
b = 9 ;


%%hacer un caso con valores fuera de rango! x > a (2 a la 15) -1
%%otro con x < a (-2 a la 15)


%%VER!! antes de hacer la sentencia ejecutable, debe checkear antes en la tabla de simbolos


%%FLOATs

FLOAT ff ;
ff = .2 ;
g = 5.7 ;
dd = .6666 ;
f = x + b ; 



%%FLOATS flasheros
f1 = 1. ;
f2 = 1.55 ;
f3 = -1.2 ;
f4 = .6 ;
rrr = 3.f-5 ;   
klan = 2.f+34 ; 
p2p = 2.5f-1 ;  
inte = 15. ; 

%%CONSIDERAR RANGO 1.17...-f38 < x < 3.4...f+38  U  -3.4...f+38 < x  


%% CADENAS DE CARACTERES -> bien y mal definidas
%%cadena = "yeah nigga" ;  %%el lexico la reconoce bien. el sintactico?
%%cad2 = "no yeah mfkr ; %%tira el error lexico

%% CADENAS MULTILINEA
%%cadena = "que onda esto" ;  %%reconoce el token, pero no reconoce regla en el sintactico
%%c2 = "esto deberia -  %%esto no anda
%%      viajar"


%% COMENTARIOS BIEN Y MAL DEFINIDOS
%% este es un comentario bien defnido


%% OPERADORES ARITMETICOS  + , - , * , /

w = x + b ;

w2 = x - b ;


%% OPERADOR DE ASIGNACION  = 

%% funciona para biding de tipo estatico y dinamico. !!VER!!


%% COMPARADORES  >= , <= , > , < , == , !=



%% LLAVES, PARENTESIS Y PUNTUACION
%% reconoce bien en las sentencias de control y las de iteracion


%% SENTENCIAS DE CONTROL
IF ( x + 5 > 9 ) { ff = 8 ; } END_IF %%; %%bieeen faÃ±lta ; !!!



%% SENTENCIAS DE ITERACION
%%LOOP { x = x + 6 ; } UNTIL ( x > 9 ) %%;


%% PROCEDIMIENTO
PROC proced ( INTEGER x ) NI = 2 { yyy = 99 ; } 

PROC f1 ( INTEGER x , REF FLOAT y , FLOAT z ) NI = 2 { x = y + z ; }


